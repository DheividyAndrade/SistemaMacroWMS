import tkinter as tk
from tkinter import ttk
import threading
import pygetwindow as gw
import time
import pyautogui
import os
from time import sleep

# ---------------------------
# Fun√ß√£o de alerta personalizada
# ---------------------------

# Caminho da imagem que voc√™ quer procurar
IMAGEM_ALVO = "telainicial.PNG"






# ---------------------------


# ---------------------------
# Interface Tkinter com Pagina√ß√£o
# ---------------------------


def criar_interface():
    root = tk.Tk()
    root.title("Automa√ß√£o WMS")
    root.geometry("400x650")

    # Frame principal para pagina√ß√£o
    main_frame = tk.Frame(root)
    main_frame.pack(fill=tk.BOTH, expand=True)

    # Dicion√°rio de fun√ß√µes (agora dividido em p√°ginas)
    paginas_funcoes = [
        # P√°gina 1
        {
            "Verificar EMPDOC ‚ùî": verificar_empdoc,
            "Verificar UZ Faltando ‚ùî": verificar_uz_faltando,
            "Associar üìà": Associar,
            "Cadastro Motorista üöö": Cadastro_Motorista,
            "Reservar üì¶": reservar,
            "Coletor üìü": coletor,
            "Reconferir UZ ‚Ü™Ô∏è": reconferir_uz,
            "Etiqueta UZ üè∑Ô∏è": etiqueta_uz,
            "Etiqueta Variadas üè∑Ô∏è": etiqueta_variadas,
            "Liberar EMP ‚úÖ": Liberar_EMP,
            "Expedi√ß√£o ‚≠ê": Expedi√ß√£o,
            "recebimento ‚≠ê": recebimento,
            "Finalizar Recebimento ‚ñ∂Ô∏è": finalizar_recebimento,
            "Finalizar Expedicao ‚ñ∂Ô∏è": finalizar_expedicao,
            "Cancelamento Pedido ‚ùå": Cancelamento_Pedido,

        },
        # P√°gina 2
        {
            "Verificar Blokc AVA ‚ùî": verificar_BLOK_AVA,
            

        }
    ]

    # Vari√°vel para controlar a p√°gina atual
    pagina_atual = tk.IntVar(value=0)

    # Fun√ß√£o para atualizar a p√°gina
    def atualizar_pagina():
        # Limpa frame atual
        for widget in botoes_frame.winfo_children():
            widget.destroy()

        # Adiciona bot√µes da p√°gina atual
        funcoes = paginas_funcoes[pagina_atual.get()]
        for nome, func in funcoes.items():
            btn = ttk.Button(botoes_frame, text=nome, width=30,
                             command=lambda f=func: threading.Thread(target=f).start())
            btn.pack(pady=5)

        # Atualiza indicador de p√°gina
        pagina_label.config(
            text=f"P√°gina {pagina_atual.get() + 1}/{len(paginas_funcoes)}")

        # Configura estado dos bot√µes de navega√ß√£o
        if pagina_atual.get() == 0:
            btn_anterior.config(state=tk.DISABLED)
        else:
            btn_anterior.config(state=tk.NORMAL)

        if pagina_atual.get() == len(paginas_funcoes) - 1:
            btn_proximo.config(state=tk.DISABLED)
        else:
            btn_proximo.config(state=tk.NORMAL)

    # Frame para os bot√µes de fun√ß√£o
    botoes_frame = tk.Frame(main_frame)
    botoes_frame.pack(pady=20)

    # Frame para navega√ß√£o
    navegacao_frame = tk.Frame(main_frame)
    navegacao_frame.pack(side=tk.BOTTOM, pady=10)

    # Bot√£o p√°gina anterior
    btn_anterior = ttk.Button(navegacao_frame, text="‚Üê", width=5,
                              command=lambda: [pagina_atual.set(pagina_atual.get() - 1), atualizar_pagina()])
    btn_anterior.pack(side=tk.LEFT, padx=10)

    # Indicador de p√°gina
    pagina_label = tk.Label(navegacao_frame, text="", font=("Arial", 10))
    pagina_label.pack(side=tk.LEFT, padx=10)

    # Bot√£o pr√≥xima p√°gina
    btn_proximo = ttk.Button(navegacao_frame, text="‚Üí", width=5,
                             command=lambda: [pagina_atual.set(pagina_atual.get() + 1), atualizar_pagina()])
    btn_proximo.pack(side=tk.LEFT, padx=10)

    # Label de t√≠tulo
    label = tk.Label(main_frame, text="Selecione a fun√ß√£o:",
                     font=("Arial", 14, "bold"))
    label.pack(pady=10)

    # Inicializa primeira p√°gina
    atualizar_pagina()

    root.mainloop()


if __name__ == "__main__":
    criar_interface()
